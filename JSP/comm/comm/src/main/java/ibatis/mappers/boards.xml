<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap
        PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
        "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="boards">
	<!-- id="insertBoard" 이 SQL 구문의 식별자를 지정한다 parameterClass="vo.Board" 이 SQL 
		구문을 실행하는데 필요한 값을 제공하는 객체의 타입을 지정한다 이 SQL 구문을 실행하는데 Board객체에 필요한 값을 담아서 전달해야 
		한다 Board객체 int no String title title="연습입니다" User user user=User객체 int no 
		no=1000 String id String content content="게시글 작업연습 내용입니다" -->
	<insert id="insertBoard" parameterClass="vo.Board">
		INSERT INTO COMM_BOARDS
		(BOARD_NO, BOARD_TITLE, USER_NO, BOARD_CONTENT)
		VALUES (BOARDS_SEQ.NEXTVAL, #title#, #user.no#, #content#)
	</insert>

	<!-- id="getBoards" 이 SQL구문의 식별자를 정의한다 parameterClass="map" 이 SQL구문의 실행에 
		필요한 값은 Map객체로 전달받는다 map은 java.util.Map의 별칭이다 Map<String, Object> paramMap 
		= new HashMap<>(); paramMap.put("begin",1); paramMap.put("end",1); resultClass="vo.Board"각 
		행은 Board객체를 생성해서 한 행씩 저장한다 이 SQL구문을 실행해서 획득된 조회 결과의 -->
	<select id="getBoards" parameterClass="map"
		resultClass="vo.Board">
		SELECT A.BOARD_NO as no,
		A.BOARD_TITLE as title,
		A.USER_NO as "user.no",
		B.USER_NAME as "user.name",
		A.BOARD_REPLY_CNT as replyCnt,
		A.BOARD_CREATED_DATE as createdDate
		FROM (SELECT ROW_NUMBER() OVER (ORDER BY BOARD_NO DESC) NUM, BOARD_NO,
		BOARD_TITLE, USER_NO, BOARD_CONTENT, BOARD_REPLY_CNT,
		BOARD_CREATED_DATE
		FROM
		COMM_BOARDS
		WHERE
		BOARD_DELETED = 'N'
		<isEqual property="opt" compareValue="title">
			and board_title like '%' || #keyword# || '%'
		</isEqual>
		<isEqual property="opt" compareValue="writer">
			and user_no in (select user_no
			from comm_users
			where user_name = #keyword#)
		</isEqual>
		<isEqual property="opt" compareValue="content">
			and board_content like '%' || #keyword# || '%'
		</isEqual>

		) A, COMM_USERS B
		WHERE a.num between #begin#
		and #end#
		and A.USER_NO = B.USER_NO
		ORDER BY A.BOARD_NO DESC
	</select>

	<!-- id="getTotalRows" 이 SQL 구문의 식별자를 정의한다 parameterClass="map" 이 SQL 구문의 
		실행에 필요한 값은 Map으로 전달받는다. map은 java.util.Map의 별칭이다. 전달받은 Map객체에는 key/value로 
		opt=title, opt=writer, opt=content keyword=검색어 정보가 포함되어있다. resultClass="int" 
		이 SQL 구문을 실행해서 획득된 값을 java.lang.Integer 객체에 담아서 반환 int는 java.lang.Integer의 
		별칭 * 이 SQL 구문은 ?가 하나도 필요없기 때문에 parametClass 속성을 정의할 필요가 없다 -->
	<select id="getTotalRows" parameterClass="map" resultClass="int">
		SELECT COUNT(*)
		FROM COMM_BOARDS
		WHERE BOARD_DELETED = 'N'
		<isEqual property="opt" compareValue="title">
			and board_title like '%' || #keyword# || '%'
		</isEqual>
		<isEqual property="opt" compareValue="writer">
			and user_no in (select user_no
			from comm_users
			where user_name = #keyword#)
		</isEqual>
		<isEqual property="opt" compareValue="content">
			and board_content like '%' || #keyword# || '%'
		</isEqual>

	</select>

	<!-- id = getBoardByNo SQL 구문 식별자 parameterClass ="int" SQL구 구문 실행할 때 필요한 
		값의 타입 정의 resultClass = "vo.Board" SQL 구문의 실형결과를 저장할 객체다 -->
	<select id="getBoardByNo" parameterClass="int"
		resultClass="vo.Board">
		select b.board_no as no,
		b.board_title as title,
		u.user_no as "user.no",
		u.user_name as "user.name",
		b.board_reply_cnt as replyCnt,
		b.board_deleted as deleted,
		b.board_content as content,
		b.board_created_date as createdDate,
		b.board_updated_date as updatedDate
		from comm_users u, comm_boards b
		where b.board_no = #value#
		and b.user_no = u.user_no

	</select>

	<update id="updateBoard" parameterClass="vo.Board">
		update comm_boards
		set board_title = #title#,
		board_content = #content#,
		board_reply_cnt = #replyCnt#,
		board_deleted = #deleted#,
		board_updated_Date = sysdate
		where board_no = #no#
	</update>


</sqlMap>